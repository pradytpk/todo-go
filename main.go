package main

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"time"

	"github.com/go-chi/chi"
	"github.com/go-chi/chi/middleware"
	"github.com/thedevsaddam/renderer"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"gopkg.in/mgo.v2/bson"
)

// Define global variables
var rnd *renderer.Render
var collection *mongo.Collection

// Define constants for MongoDB connection
const (
	hostName       string = "localhost:27017"
	dbName         string = "demo_todo"
	collectionName string = "todo"
	port           string = ":9000"
)

// Define data models for MongoDB documents and JSON representation
type (
	todoModel struct {
		ID        string    `bson:"_id,omitempty"`
		Title     string    `bson:"title"`
		Completed bool      `bson:"completed"`
		CreatedAt time.Time `bson:"createAt"`
	}

	todo struct {
		ID        string    `json:"id"`
		Title     string    `json:"title"`
		Completed bool      `json:"completed"`
		CreatedAt time.Time `json:"created_at"`
	}
)

// Initialize renderer and MongoDB connection
func init() {
	rnd = renderer.New()

	// Set MongoDB client options
	clientOptions := options.Client().ApplyURI("mongodb://" + hostName)

	// Connect to MongoDB
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	// Select database and collection
	db := client.Database(dbName)
	collection = db.Collection(collectionName)
}

// Handler for the home route
func homeHandler(w http.ResponseWriter, r *http.Request) {
	err := rnd.Template(w, http.StatusOK, []string{"static/home.tpl"}, nil)
	checkErr(err)
}

// Handler to create a new todo
func createTodo(w http.ResponseWriter, r *http.Request) {
	var t todo

	// Decode JSON request body into todo struct
	if err := json.NewDecoder(r.Body).Decode(&t); err != nil {
		rnd.JSON(w, http.StatusProcessing, err)
		return
	}

	// Simple validation for title field
	if t.Title == "" {
		rnd.JSON(w, http.StatusBadRequest, renderer.M{
			"message": "The title field is required",
		})
		return
	}

	// Create todo model
	tm := todoModel{
		ID:        "", // ID will be generated by MongoDB
		Title:     t.Title,
		Completed: false,
		CreatedAt: time.Now(),
	}

	// Insert todo document into MongoDB collection
	insertResult, err := collection.InsertOne(context.Background(), tm)
	if err != nil {
		rnd.JSON(w, http.StatusProcessing, renderer.M{
			"message": "Failed to save todo",
			"error":   err,
		})
		return
	}

	// Respond with success message and inserted ID
	rnd.JSON(w, http.StatusCreated, renderer.M{
		"message": "Todo created successfully",
		"todo_id": insertResult.InsertedID,
	})
}

// Handler to update an existing todo
func updateTodo(w http.ResponseWriter, r *http.Request) {
	id := strings.TrimSpace(chi.URLParam(r, "id"))

	// Check if id is valid ObjectID
	if _, err := primitive.ObjectIDFromHex(id); err != nil {
		rnd.JSON(w, http.StatusBadRequest, renderer.M{
			"message": "The id is invalid",
		})
		return
	}

	var t todo

	// Decode JSON request body into todo struct
	if err := json.NewDecoder(r.Body).Decode(&t); err != nil {
		rnd.JSON(w, http.StatusProcessing, err)
		return
	}

	// Simple validation for title field
	if t.Title == "" {
		rnd.JSON(w, http.StatusBadRequest, renderer.M{
			"message": "The title field is required",
		})
		return
	}

	// Update todo document in MongoDB collection
	update := bson.M{"$set": bson.M{"title": t.Title, "completed": t.Completed}}
	_, err := collection.UpdateOne(context.Background(), bson.M{"_id": id}, update)
	if err != nil {
		rnd.JSON(w, http.StatusProcessing, renderer.M{
			"message": "Failed to update todo",
			"error":   err,
		})
		return
	}

	// Respond with success message
	rnd.JSON(w, http.StatusOK, renderer.M{
		"message": "Todo updated successfully",
	})
}

// Handler to fetch all todos
func fetchTodos(w http.ResponseWriter, r *http.Request) {
	cursor, err := collection.Find(context.Background(), bson.M{})
	if err != nil {
		rnd.JSON(w, http.StatusProcessing, renderer.M{
			"message": "Failed to fetch todo",
			"error":   err,
		})
		return
	}
	defer cursor.Close(context.Background())

	var todos []todoModel
	if err := cursor.All(context.Background(), &todos); err != nil {
		rnd.JSON(w, http.StatusProcessing, renderer.M{
			"message": "Failed to fetch todo",
			"error":   err,
		})
		return
	}

	// Map todo models to todo structs
	todoList := []todo{}
	for _, t := range todos {
		todoList = append(todoList, todo{
			ID:        t.ID,
			Title:     t.Title,
			Completed: t.Completed,
			CreatedAt: t.CreatedAt,
		})
	}

	// Respond with todo list
	rnd.JSON(w, http.StatusOK, renderer.M{
		"data": todoList,
	})
}

// Handler to delete a todo
func deleteTodo(w http.ResponseWriter, r *http.Request) {
	id := strings.TrimSpace(chi.URLParam(r, "id"))

	// Check if id is valid ObjectID
	if _, err := primitive.ObjectIDFromHex(id); err != nil {
		rnd.JSON(w, http.StatusBadRequest, renderer.M{
			"message": "The id is invalid",
		})
		return
	}

	// Delete todo document from MongoDB collection
	_, err := collection.DeleteOne(context.Background(), bson.M{"_id": id})
	if err != nil {
		rnd.JSON(w, http.StatusProcessing, renderer.M{
			"message": "Failed to delete todo",
			"error":   err,
		})
		return
	}

	// Respond with success message
	rnd.JSON(w, http.StatusOK, renderer.M{
		"message": "Todo deleted successfully",
	})
}

// Main function
func main() {
	// Handle OS signals for graceful shutdown
	stopChan := make(chan os.Signal)
	signal.Notify(stopChan, os.Interrupt)

	// Initialize Chi router and middleware
	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Get("/", homeHandler)

	// Mount todo handlers
	r.Mount("/todo", todoHandlers())

	// Create HTTP server
	srv := &http.Server{
		Addr:         port,
		Handler:      r,
		ReadTimeout:  60 * time.Second,
		WriteTimeout: 60 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Start HTTP server in a goroutine
	go func() {
		log.Println("Listening on port ", port)
		if err := srv.ListenAndServe(); err != nil {
			log.Printf("listen: %s\n", err)
		}
	}()

	// Wait for OS signal to shutdown server
	<-stopChan
	log.Println("Shutting down server...")

	// Create context with timeout for graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	srv.Shutdown(ctx)

	log.Println("Server gracefully stopped!")
}

// Middleware for todo routes
func todoHandlers() http.Handler {
	rg := chi.NewRouter()
	rg.Group(func(r chi.Router) {
		r.Get("/", fetchTodos)        // Fetch all todos
		r.Post("/", createTodo)       // Create a new todo
		r.Put("/{id}", updateTodo)    // Update an existing todo
		r.Delete("/{id}", deleteTodo) // Delete a todo
	})
	return rg
}

// Helper function to check for errors
func checkErr(err error) {
	if err != nil {
		log.Fatal(err) // Respond with error page or message
	}
}
